
canfd_internal_loop.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004208  08004208  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004208  08004208  00014208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004210  08004210  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000010  08004228  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08004228  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f4fc  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f35  00000000  00000000  0002f57f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  000314b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000094b  00000000  00000000  000320d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cbbd  00000000  00000000  00032a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2ac  00000000  00000000  0004f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7f51  00000000  00000000  0005d884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003204  00000000  00000000  001157d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  001189dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080041a0 	.word	0x080041a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	080041a0 	.word	0x080041a0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
static void MX_GPIO_Init(void);
static void MX_FDCAN1_Init(void);
static void MX_LPUART1_UART_Init(void);

int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  HAL_Init();
 8000518:	f000 fad3 	bl	8000ac2 <HAL_Init>

  SystemClock_Config();
 800051c:	f000 f84e 	bl	80005bc <SystemClock_Config>
  MX_GPIO_Init();
 8000520:	f000 f928 	bl	8000774 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000524:	f000 f896 	bl	8000654 <MX_FDCAN1_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f8da 	bl	80006e0 <MX_LPUART1_UART_Init>

  // can filter initialization
  filter.FilterID1 =0;
 800052c:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <main+0x90>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  filter.FilterID2 =0;
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <main+0x90>)
 8000534:	2200      	movs	r2, #0
 8000536:	615a      	str	r2, [r3, #20]
  filter.FilterIndex = 0;
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <main+0x90>)
 800053a:	2200      	movs	r2, #0
 800053c:	605a      	str	r2, [r3, #4]
  filter.FilterType = FDCAN_FILTER_MASK;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <main+0x90>)
 8000540:	2202      	movs	r2, #2
 8000542:	609a      	str	r2, [r3, #8]
  filter.IdType = FDCAN_STANDARD_ID;
 8000544:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <main+0x90>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
  filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800054a:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <main+0x90>)
 800054c:	2201      	movs	r2, #1
 800054e:	60da      	str	r2, [r3, #12]
  HAL_FDCAN_ConfigFilter(&hfdcan1, &filter);
 8000550:	4914      	ldr	r1, [pc, #80]	; (80005a4 <main+0x90>)
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <main+0x94>)
 8000554:	f000 fe72 	bl	800123c <HAL_FDCAN_ConfigFilter>

  // can module start
  HAL_FDCAN_Start(&hfdcan1);
 8000558:	4813      	ldr	r0, [pc, #76]	; (80005a8 <main+0x94>)
 800055a:	f000 fec9 	bl	80012f0 <HAL_FDCAN_Start>
  HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 fb1f 	bl	8000ba4 <HAL_Delay>
  while (1)
  {

	  tx_header.DataLength= FDCAN_DLC_BYTES_2;
 8000566:	4b11      	ldr	r3, [pc, #68]	; (80005ac <main+0x98>)
 8000568:	2202      	movs	r2, #2
 800056a:	60da      	str	r2, [r3, #12]
	  tx_header.Identifier = 0x04;
 800056c:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <main+0x98>)
 800056e:	2204      	movs	r2, #4
 8000570:	601a      	str	r2, [r3, #0]
	  tx_header.IdType = FDCAN_STANDARD_ID;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0x98>)
 8000574:	2200      	movs	r2, #0
 8000576:	605a      	str	r2, [r3, #4]
	  tx_header.FDFormat =FDCAN_FRAME_CLASSIC;
 8000578:	4b0c      	ldr	r3, [pc, #48]	; (80005ac <main+0x98>)
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &tx_header, tx_data);
 800057e:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <main+0x9c>)
 8000580:	490a      	ldr	r1, [pc, #40]	; (80005ac <main+0x98>)
 8000582:	4809      	ldr	r0, [pc, #36]	; (80005a8 <main+0x94>)
 8000584:	f000 fedc 	bl	8001340 <HAL_FDCAN_AddMessageToTxFifoQ>
	  if(HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0)>0)
 8000588:	2140      	movs	r1, #64	; 0x40
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <main+0x94>)
 800058c:	f001 f824 	bl	80015d8 <HAL_FDCAN_GetRxFifoFillLevel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0e7      	beq.n	8000566 <main+0x52>
	  {
		  HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data);
 8000596:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <main+0xa0>)
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <main+0xa4>)
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <main+0x94>)
 800059e:	f000 ff13 	bl	80013c8 <HAL_FDCAN_GetRxMessage>
	  tx_header.DataLength= FDCAN_DLC_BYTES_2;
 80005a2:	e7e0      	b.n	8000566 <main+0x52>
 80005a4:	20000124 	.word	0x20000124
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	2000013c 	.word	0x2000013c
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000188 	.word	0x20000188
 80005b8:	20000160 	.word	0x20000160

080005bc <SystemClock_Config>:

}


void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2238      	movs	r2, #56	; 0x38
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fdbc 	bl	8004148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005de:	2000      	movs	r0, #0
 80005e0:	f001 fc06 	bl	8001df0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	2302      	movs	r3, #2
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2340      	movs	r3, #64	; 0x40
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005fe:	2355      	movs	r3, #85	; 0x55
 8000600:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fc90 	bl	8001f38 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800061e:	f000 f8d9 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2303      	movs	r3, #3
 8000628:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f001 ff8e 	bl	800255c <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000646:	f000 f8c5 	bl	80007d4 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
	...

08000654 <MX_FDCAN1_Init>:


static void MX_FDCAN1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0

  hfdcan1.Instance = FDCAN1;
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 800065a:	4a20      	ldr	r2, [pc, #128]	; (80006dc <MX_FDCAN1_Init+0x88>)
 800065c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800065e:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 8000660:	2200      	movs	r2, #0
 8000662:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000664:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 800066a:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 800066c:	2203      	movs	r2, #3
 800066e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 8000672:	2200      	movs	r2, #0
 8000674:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 8000678:	2200      	movs	r2, #0
 800067a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 800067e:	2200      	movs	r2, #0
 8000680:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 8000684:	2210      	movs	r2, #16
 8000686:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 800068a:	2201      	movs	r2, #1
 800068c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 8000690:	2202      	movs	r2, #2
 8000692:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000694:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 8000696:	2202      	movs	r2, #2
 8000698:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 800069c:	2201      	movs	r2, #1
 800069e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006a0:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006ac:	4b0a      	ldr	r3, [pc, #40]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006b8:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80006c4:	4804      	ldr	r0, [pc, #16]	; (80006d8 <MX_FDCAN1_Init+0x84>)
 80006c6:	f000 fc5f 	bl	8000f88 <HAL_FDCAN_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80006d0:	f000 f880 	bl	80007d4 <Error_Handler>
  }


}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000002c 	.word	0x2000002c
 80006dc:	40006400 	.word	0x40006400

080006e0 <MX_LPUART1_UART_Init>:


static void MX_LPUART1_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 80006e6:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_LPUART1_UART_Init+0x8c>)
 80006e8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 80006ec:	4a20      	ldr	r2, [pc, #128]	; (8000770 <MX_LPUART1_UART_Init+0x90>)
 80006ee:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 8000704:	220c      	movs	r2, #12
 8000706:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 800070a:	2200      	movs	r2, #0
 800070c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 800071c:	2200      	movs	r2, #0
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8000720:	4811      	ldr	r0, [pc, #68]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 8000722:	f002 fb27 	bl	8002d74 <HAL_HalfDuplex_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800072c:	f000 f852 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 8000734:	f003 fc3d 	bl	8003fb2 <HAL_UARTEx_SetTxFifoThreshold>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800073e:	f000 f849 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 8000746:	f003 fc72 	bl	800402e <HAL_UARTEx_SetRxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000750:	f000 f840 	bl	80007d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000754:	4804      	ldr	r0, [pc, #16]	; (8000768 <MX_LPUART1_UART_Init+0x88>)
 8000756:	f003 fbf3 	bl	8003f40 <HAL_UARTEx_DisableFifoMode>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000760:	f000 f838 	bl	80007d4 <Error_Handler>
  }

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000090 	.word	0x20000090
 800076c:	40008000 	.word	0x40008000
 8000770:	00033324 	.word	0x00033324

08000774 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0


  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_GPIO_Init+0x5c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <MX_GPIO_Init+0x5c>)
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_GPIO_Init+0x5c>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_GPIO_Init+0x5c>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <MX_GPIO_Init+0x5c>)
 8000798:	f043 0304 	orr.w	r3, r3, #4
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_GPIO_Init+0x5c>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0304 	and.w	r3, r3, #4
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_GPIO_Init+0x5c>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <MX_GPIO_Init+0x5c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_GPIO_Init+0x5c>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]


}
 80007c2:	bf00      	nop
 80007c4:	3714      	adds	r7, #20
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	40021000 	.word	0x40021000

080007d4 <Error_Handler>:


void Error_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x44>)
 80007e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ea:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <HAL_MspInit+0x44>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6613      	str	r3, [r2, #96]	; 0x60
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_MspInit+0x44>)
 80007f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x44>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x44>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x44>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b09a      	sub	sp, #104	; 0x68
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2244      	movs	r2, #68	; 0x44
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f003 fc7d 	bl	8004148 <memset>
  if(hfdcan->Instance==FDCAN1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <HAL_FDCAN_MspInit+0xcc>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d149      	bne.n	80008ec <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800085e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4618      	mov	r0, r3
 800086a:	f002 f893 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000874:	f7ff ffae 	bl	80007d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <HAL_FDCAN_MspInit+0xd0>)
 800087a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <HAL_FDCAN_MspInit+0xd0>)
 800087e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000882:	6593      	str	r3, [r2, #88]	; 0x58
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <HAL_FDCAN_MspInit+0xd0>)
 8000886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	4b19      	ldr	r3, [pc, #100]	; (80008f8 <HAL_FDCAN_MspInit+0xd0>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000894:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <HAL_FDCAN_MspInit+0xd0>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <HAL_FDCAN_MspInit+0xd0>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008ac:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b6:	2300      	movs	r3, #0
 80008b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008ba:	2309      	movs	r3, #9
 80008bc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008c2:	4619      	mov	r1, r3
 80008c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c8:	f001 f910 	bl	8001aec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2100      	movs	r1, #0
 80008d0:	2015      	movs	r0, #21
 80008d2:	f000 fa64 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80008d6:	2015      	movs	r0, #21
 80008d8:	f000 fa7b 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80008dc:	2200      	movs	r2, #0
 80008de:	2100      	movs	r1, #0
 80008e0:	2016      	movs	r0, #22
 80008e2:	f000 fa5c 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80008e6:	2016      	movs	r0, #22
 80008e8:	f000 fa73 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80008ec:	bf00      	nop
 80008ee:	3768      	adds	r7, #104	; 0x68
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40006400 	.word	0x40006400
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b09a      	sub	sp, #104	; 0x68
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2244      	movs	r2, #68	; 0x44
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f003 fc13 	bl	8004148 <memset>
  if(huart->Instance==LPUART1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <HAL_UART_MspInit+0xb4>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d13d      	bne.n	80009a8 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800092c:	2320      	movs	r3, #32
 800092e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	4618      	mov	r0, r3
 800093a:	f002 f82b 	bl	8002994 <HAL_RCCEx_PeriphCLKConfig>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000944:	f7ff ff46 	bl	80007d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <HAL_UART_MspInit+0xb8>)
 800094a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <HAL_UART_MspInit+0xb8>)
 800094e:	f043 0301 	orr.w	r3, r3, #1
 8000952:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HAL_UART_MspInit+0xb8>)
 8000956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <HAL_UART_MspInit+0xb8>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <HAL_UART_MspInit+0xb8>)
 8000966:	f043 0304 	orr.w	r3, r3, #4
 800096a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <HAL_UART_MspInit+0xb8>)
 800096e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000978:	2302      	movs	r3, #2
 800097a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000980:	2301      	movs	r3, #1
 8000982:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000988:	2308      	movs	r3, #8
 800098a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000990:	4619      	mov	r1, r3
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <HAL_UART_MspInit+0xbc>)
 8000994:	f001 f8aa 	bl	8001aec <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	205b      	movs	r0, #91	; 0x5b
 800099e:	f000 f9fe 	bl	8000d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80009a2:	205b      	movs	r0, #91	; 0x5b
 80009a4:	f000 fa15 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3768      	adds	r7, #104	; 0x68
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40008000 	.word	0x40008000
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000800 	.word	0x48000800

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <MemManage_Handler+0x4>

080009ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <UsageFault_Handler+0x4>

080009da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f8ae 	bl	8000b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <FDCAN1_IT0_IRQHandler+0x10>)
 8000a16:	f000 fdfd 	bl	8001614 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000002c 	.word	0x2000002c

08000a24 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <FDCAN1_IT1_IRQHandler+0x10>)
 8000a2a:	f000 fdf3 	bl	8001614 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000002c 	.word	0x2000002c

08000a38 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <LPUART1_IRQHandler+0x10>)
 8000a3e:	f002 f9f1 	bl	8002e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000090 	.word	0x20000090

08000a4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <SystemInit+0x20>)
 8000a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <SystemInit+0x20>)
 8000a58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a74:	f7ff ffea 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	; (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000a9e:	f003 fb5b 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa2:	f7ff fd37 	bl	8000514 <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ab4:	08004218 	.word	0x08004218
  ldr r2, =_sbss
 8000ab8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000abc:	20000190 	.word	0x20000190

08000ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_2_IRQHandler>

08000ac2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f95b 	bl	8000d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad2:	200f      	movs	r0, #15
 8000ad4:	f000 f80e 	bl	8000af4 <HAL_InitTick>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	71fb      	strb	r3, [r7, #7]
 8000ae2:	e001      	b.n	8000ae8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae4:	f7ff fe7c 	bl	80007e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae8:	79fb      	ldrb	r3, [r7, #7]

}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
	...

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000b00:	4b16      	ldr	r3, [pc, #88]	; (8000b5c <HAL_InitTick+0x68>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d022      	beq.n	8000b4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_InitTick+0x6c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <HAL_InitTick+0x68>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f966 	bl	8000dee <HAL_SYSTICK_Config>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10f      	bne.n	8000b48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	d809      	bhi.n	8000b42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	6879      	ldr	r1, [r7, #4]
 8000b32:	f04f 30ff 	mov.w	r0, #4294967295
 8000b36:	f000 f932 	bl	8000d9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_InitTick+0x70>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	e007      	b.n	8000b52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	73fb      	strb	r3, [r7, #15]
 8000b46:	e004      	b.n	8000b52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	e001      	b.n	8000b52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	2000000c 	.word	0x2000000c
 8000b60:	20000004 	.word	0x20000004
 8000b64:	20000008 	.word	0x20000008

08000b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	; (8000b84 <HAL_IncTick+0x1c>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x20>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4413      	add	r3, r2
 8000b76:	4a03      	ldr	r2, [pc, #12]	; (8000b84 <HAL_IncTick+0x1c>)
 8000b78:	6013      	str	r3, [r2, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	2000018c 	.word	0x2000018c
 8000b88:	2000000c 	.word	0x2000000c

08000b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_GetTick+0x14>)
 8000b92:	681b      	ldr	r3, [r3, #0]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	2000018c 	.word	0x2000018c

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff ffee 	bl	8000b8c <HAL_GetTick>
 8000bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bbc:	d004      	beq.n	8000bc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_Delay+0x40>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bc8:	bf00      	nop
 8000bca:	f7ff ffdf 	bl	8000b8c <HAL_GetTick>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	1ad3      	subs	r3, r2, r3
 8000bd4:	68fa      	ldr	r2, [r7, #12]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d8f7      	bhi.n	8000bca <HAL_Delay+0x26>
  {
  }
}
 8000bda:	bf00      	nop
 8000bdc:	bf00      	nop
 8000bde:	3710      	adds	r7, #16
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000000c 	.word	0x2000000c

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d54:	d301      	bcc.n	8000d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00f      	b.n	8000d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <SysTick_Config+0x40>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d62:	210f      	movs	r1, #15
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f7ff ff8e 	bl	8000c88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <SysTick_Config+0x40>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d72:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <SysTick_Config+0x40>)
 8000d74:	2207      	movs	r2, #7
 8000d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	e000e010 	.word	0xe000e010

08000d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f7ff ff29 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	4603      	mov	r3, r0
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff40 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff90 	bl	8000cdc <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5f 	bl	8000c88 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff33 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff ffa4 	bl	8000d44 <SysTick_Config>
 8000dfc:	4603      	mov	r3, r0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d005      	beq.n	8000e2a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2204      	movs	r2, #4
 8000e22:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e24:	2301      	movs	r3, #1
 8000e26:	73fb      	strb	r3, [r7, #15]
 8000e28:	e037      	b.n	8000e9a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f022 020e 	bic.w	r2, r2, #14
 8000e38:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e48:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0201 	bic.w	r2, r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	f003 021f 	and.w	r2, r3, #31
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	2101      	movs	r1, #1
 8000e68:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e76:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e8e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e98:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d00d      	beq.n	8000eec <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e047      	b.n	8000f7c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 020e 	bic.w	r2, r2, #14
 8000efa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f022 0201 	bic.w	r2, r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	2101      	movs	r1, #1
 8000f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000f38:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d00c      	beq.n	8000f5c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f50:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000f5a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d003      	beq.n	8000f7c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	4798      	blx	r3
    }
  }
  return status;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e147      	b.n	800122a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d106      	bne.n	8000fb4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fc3a 	bl	8000828 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0210 	bic.w	r2, r2, #16
 8000fc2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc4:	f7ff fde2 	bl	8000b8c <HAL_GetTick>
 8000fc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000fca:	e012      	b.n	8000ff2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000fcc:	f7ff fdde 	bl	8000b8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b0a      	cmp	r3, #10
 8000fd8:	d90b      	bls.n	8000ff2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e11b      	b.n	800122a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	f003 0308 	and.w	r3, r3, #8
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d0e5      	beq.n	8000fcc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0201 	orr.w	r2, r2, #1
 800100e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001010:	f7ff fdbc 	bl	8000b8c <HAL_GetTick>
 8001014:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001016:	e012      	b.n	800103e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001018:	f7ff fdb8 	bl	8000b8c <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	2b0a      	cmp	r3, #10
 8001024:	d90b      	bls.n	800103e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2203      	movs	r2, #3
 8001036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e0f5      	b.n	800122a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0e5      	beq.n	8001018 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	699a      	ldr	r2, [r3, #24]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 0202 	orr.w	r2, r2, #2
 800105a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a74      	ldr	r2, [pc, #464]	; (8001234 <HAL_FDCAN_Init+0x2ac>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d103      	bne.n	800106e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001066:	4a74      	ldr	r2, [pc, #464]	; (8001238 <HAL_FDCAN_Init+0x2b0>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7c1b      	ldrb	r3, [r3, #16]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d108      	bne.n	8001088 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	699a      	ldr	r2, [r3, #24]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001084:	619a      	str	r2, [r3, #24]
 8001086:	e007      	b.n	8001098 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	699a      	ldr	r2, [r3, #24]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001096:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7c5b      	ldrb	r3, [r3, #17]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d108      	bne.n	80010b2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	699a      	ldr	r2, [r3, #24]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010ae:	619a      	str	r2, [r3, #24]
 80010b0:	e007      	b.n	80010c2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	699a      	ldr	r2, [r3, #24]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80010c0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7c9b      	ldrb	r3, [r3, #18]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d108      	bne.n	80010dc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699a      	ldr	r2, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010d8:	619a      	str	r2, [r3, #24]
 80010da:	e007      	b.n	80010ec <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	699a      	ldr	r2, [r3, #24]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80010ea:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	430a      	orrs	r2, r1
 8001100:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	699a      	ldr	r2, [r3, #24]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001110:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0210 	bic.w	r2, r2, #16
 8001120:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d108      	bne.n	800113c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0204 	orr.w	r2, r2, #4
 8001138:	619a      	str	r2, [r3, #24]
 800113a:	e02c      	b.n	8001196 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d028      	beq.n	8001196 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d01c      	beq.n	8001186 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	699a      	ldr	r2, [r3, #24]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800115a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	691a      	ldr	r2, [r3, #16]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0210 	orr.w	r2, r2, #16
 800116a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b03      	cmp	r3, #3
 8001172:	d110      	bne.n	8001196 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699a      	ldr	r2, [r3, #24]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0220 	orr.w	r2, r2, #32
 8001182:	619a      	str	r2, [r3, #24]
 8001184:	e007      	b.n	8001196 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	699a      	ldr	r2, [r3, #24]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0220 	orr.w	r2, r2, #32
 8001194:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	699b      	ldr	r3, [r3, #24]
 800119a:	3b01      	subs	r3, #1
 800119c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011a6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80011ae:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80011be:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80011c0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80011ca:	d115      	bne.n	80011f8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	3b01      	subs	r3, #1
 80011d8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011da:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e0:	3b01      	subs	r3, #1
 80011e2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80011e4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	3b01      	subs	r3, #1
 80011ee:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80011f4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80011f6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 fb9a 	bl	8001948 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2201      	movs	r2, #1
 8001224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40006400 	.word	0x40006400
 8001238:	40006500 	.word	0x40006500

0800123c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800123c:	b480      	push	{r7}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800124c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d002      	beq.n	800125a <HAL_FDCAN_ConfigFilter+0x1e>
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b02      	cmp	r3, #2
 8001258:	d13d      	bne.n	80012d6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d119      	bne.n	8001296 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800126e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001276:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	e01d      	b.n	80012d2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	075a      	lsls	r2, r3, #29
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	079a      	lsls	r2, r3, #30
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	3304      	adds	r3, #4
 80012ca:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e006      	b.n	80012e4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	f043 0202 	orr.w	r2, r3, #2
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
  }
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d110      	bne.n	8001326 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2202      	movs	r2, #2
 8001308:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	699a      	ldr	r2, [r3, #24]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0201 	bic.w	r2, r2, #1
 800131a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e006      	b.n	8001334 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132a:	f043 0204 	orr.w	r2, r3, #4
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
  }
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d12c      	bne.n	80013b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d007      	beq.n	8001378 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e023      	b.n	80013c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001380:	0c1b      	lsrs	r3, r3, #16
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 fb30 	bl	80019f4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	697a      	ldr	r2, [r7, #20]
 800139c:	fa01 f202 	lsl.w	r2, r1, r2
 80013a0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80013a4:	2201      	movs	r2, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e006      	b.n	80013c0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b6:	f043 0208 	orr.w	r2, r3, #8
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
  }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b08b      	sub	sp, #44	; 0x2c
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80013e0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80013e2:	7efb      	ldrb	r3, [r7, #27]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	f040 80e8 	bne.w	80015ba <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b40      	cmp	r3, #64	; 0x40
 80013ee:	d137      	bne.n	8001460 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d107      	bne.n	8001410 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0db      	b.n	80015c8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001418:	0e1b      	lsrs	r3, r3, #24
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10a      	bne.n	8001438 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800142a:	0a5b      	lsrs	r3, r3, #9
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d101      	bne.n	8001438 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001434:	2301      	movs	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001440:	0a1b      	lsrs	r3, r3, #8
 8001442:	f003 0303 	and.w	r3, r3, #3
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8001450:	69fa      	ldr	r2, [r7, #28]
 8001452:	4613      	mov	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e036      	b.n	80014ce <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	2b00      	cmp	r3, #0
 800146e:	d107      	bne.n	8001480 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001474:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0a3      	b.n	80015c8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001488:	0e1b      	lsrs	r3, r3, #24
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	2b01      	cmp	r3, #1
 8001490:	d10a      	bne.n	80014a8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80014a4:	2301      	movs	r3, #1
 80014a6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	4413      	add	r3, r2
 80014ba:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	4613      	mov	r3, r2
 80014c4:	00db      	lsls	r3, r3, #3
 80014c6:	4413      	add	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	440b      	add	r3, r1
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d107      	bne.n	80014f2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	0c9b      	lsrs	r3, r3, #18
 80014e8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e005      	b.n	80014fe <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	3304      	adds	r3, #4
 800151a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	0c1b      	lsrs	r3, r3, #16
 800152c:	f003 020f 	and.w	r2, r3, #15
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0e1b      	lsrs	r3, r3, #24
 8001552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0fda      	lsrs	r2, r3, #31
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	3304      	adds	r3, #4
 8001568:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
 8001572:	e00a      	b.n	800158a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	441a      	add	r2, r3
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	6a3b      	ldr	r3, [r7, #32]
 800157e:	440b      	add	r3, r1
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	3301      	adds	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	4a11      	ldr	r2, [pc, #68]	; (80015d4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001590:	5cd3      	ldrb	r3, [r2, r3]
 8001592:	461a      	mov	r2, r3
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	4293      	cmp	r3, r2
 8001598:	d3ec      	bcc.n	8001574 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b40      	cmp	r3, #64	; 0x40
 800159e:	d105      	bne.n	80015ac <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80015aa:	e004      	b.n	80015b6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	69fa      	ldr	r2, [r7, #28]
 80015b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e006      	b.n	80015c8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	f043 0208 	orr.w	r2, r3, #8
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
  }
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	372c      	adds	r7, #44	; 0x2c
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	080041d0 	.word	0x080041d0

080015d8 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(const FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b40      	cmp	r3, #64	; 0x40
 80015e6:	d107      	bne.n	80015f8 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	e006      	b.n	8001606 <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001600:	f003 030f 	and.w	r3, r3, #15
 8001604:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08c      	sub	sp, #48	; 0x30
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001622:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001630:	4013      	ands	r3, r2
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001648:	4013      	ands	r3, r2
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001652:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001660:	4013      	ands	r3, r2
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166a:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800166e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001676:	6a3a      	ldr	r2, [r7, #32]
 8001678:	4013      	ands	r3, r2
 800167a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001682:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001686:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	69fa      	ldr	r2, [r7, #28]
 8001690:	4013      	ands	r3, r2
 8001692:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00b      	beq.n	80016c6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d006      	beq.n	80016c6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2240      	movs	r2, #64	; 0x40
 80016be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 f921 	bl	8001908 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d019      	beq.n	8001704 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d014      	beq.n	8001704 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80016e2:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8e3 	bl	80018ca <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001706:	2b00      	cmp	r3, #0
 8001708:	d007      	beq.n	800171a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001710:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f8a2 	bl	800185e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001726:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f8a2 	bl	8001874 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800173e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 f8a2 	bl	800188a <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00c      	beq.n	800176a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001762:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f89b 	bl	80018a0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001770:	2b00      	cmp	r3, #0
 8001772:	d018      	beq.n	80017a6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800177a:	2b00      	cmp	r3, #0
 800177c:	d013      	beq.n	80017a6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001786:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800179e:	68f9      	ldr	r1, [r7, #12]
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f887 	bl	80018b4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00c      	beq.n	80017ca <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017c2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f88b 	bl	80018e0 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00c      	beq.n	80017ee <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d007      	beq.n	80017ee <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 f883 	bl	80018f4 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00f      	beq.n	8001818 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001810:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001826:	69f9      	ldr	r1, [r7, #28]
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 f881 	bl	8001930 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d009      	beq.n	8001848 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6a3a      	ldr	r2, [r7, #32]
 800183a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f000 f863 	bl	800191c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001856:	bf00      	nop
 8001858:	3730      	adds	r7, #48	; 0x30
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800185e:	b480      	push	{r7}
 8001860:	b083      	sub	sp, #12
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001950:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8001952:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001962:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	041a      	lsls	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001988:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001990:	061a      	lsls	r2, r3, #24
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e005      	b.n	80019d6 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3304      	adds	r3, #4
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d3f3      	bcc.n	80019ca <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80019e2:	bf00      	nop
 80019e4:	bf00      	nop
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	4000a400 	.word	0x4000a400

080019f4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10a      	bne.n	8001a20 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001a12:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	e00a      	b.n	8001a36 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001a28:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001a2e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a34:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a40:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001a46:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001a4c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001a54:	4313      	orrs	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	3304      	adds	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e020      	b.n	8001aca <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	3303      	adds	r3, #3
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	4413      	add	r3, r2
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	3302      	adds	r3, #2
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	440b      	add	r3, r1
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001aa0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	440b      	add	r3, r1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001aae:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001ab0:	6879      	ldr	r1, [r7, #4]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	440a      	add	r2, r1
 8001ab6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001ab8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <FDCAN_CopyMessageToRAM+0xf4>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d3d6      	bcc.n	8001a88 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3724      	adds	r7, #36	; 0x24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	080041d0 	.word	0x080041d0

08001aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001afa:	e15a      	b.n	8001db2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2101      	movs	r1, #1
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	fa01 f303 	lsl.w	r3, r1, r3
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f000 814c 	beq.w	8001dac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d005      	beq.n	8001b2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d130      	bne.n	8001b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	2203      	movs	r2, #3
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68da      	ldr	r2, [r3, #12]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	005b      	lsls	r3, r3, #1
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b62:	2201      	movs	r2, #1
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 0201 	and.w	r2, r3, #1
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d017      	beq.n	8001bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f003 0303 	and.w	r3, r3, #3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d123      	bne.n	8001c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	08da      	lsrs	r2, r3, #3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3208      	adds	r2, #8
 8001bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	220f      	movs	r2, #15
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	691a      	ldr	r2, [r3, #16]
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	f003 0307 	and.w	r3, r3, #7
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	6939      	ldr	r1, [r7, #16]
 8001c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0203 	and.w	r2, r3, #3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 80a6 	beq.w	8001dac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c60:	4b5b      	ldr	r3, [pc, #364]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c64:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_GPIO_Init+0x2e4>)
 8001c6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c78:	4a56      	ldr	r2, [pc, #344]	; (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	089b      	lsrs	r3, r3, #2
 8001c7e:	3302      	adds	r3, #2
 8001c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ca2:	d01f      	beq.n	8001ce4 <HAL_GPIO_Init+0x1f8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a4c      	ldr	r2, [pc, #304]	; (8001dd8 <HAL_GPIO_Init+0x2ec>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d019      	beq.n	8001ce0 <HAL_GPIO_Init+0x1f4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <HAL_GPIO_Init+0x2f0>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d013      	beq.n	8001cdc <HAL_GPIO_Init+0x1f0>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <HAL_GPIO_Init+0x2f4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d00d      	beq.n	8001cd8 <HAL_GPIO_Init+0x1ec>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <HAL_GPIO_Init+0x2f8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a48      	ldr	r2, [pc, #288]	; (8001de8 <HAL_GPIO_Init+0x2fc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d101      	bne.n	8001cd0 <HAL_GPIO_Init+0x1e4>
 8001ccc:	2305      	movs	r3, #5
 8001cce:	e00a      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cd0:	2306      	movs	r3, #6
 8001cd2:	e008      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	e006      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e004      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_GPIO_Init+0x1fa>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	697a      	ldr	r2, [r7, #20]
 8001ce8:	f002 0203 	and.w	r2, r2, #3
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cf6:	4937      	ldr	r1, [pc, #220]	; (8001dd4 <HAL_GPIO_Init+0x2e8>)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d04:	4b39      	ldr	r3, [pc, #228]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d28:	4a30      	ldr	r2, [pc, #192]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d52:	4a26      	ldr	r2, [pc, #152]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43db      	mvns	r3, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d7c:	4a1b      	ldr	r2, [pc, #108]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43db      	mvns	r3, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da6:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_GPIO_Init+0x300>)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f47f ae9d 	bne.w	8001afc <HAL_GPIO_Init+0x10>
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	bf00      	nop
 8001dc6:	371c      	adds	r7, #28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	48000400 	.word	0x48000400
 8001ddc:	48000800 	.word	0x48000800
 8001de0:	48000c00 	.word	0x48000c00
 8001de4:	48001000 	.word	0x48001000
 8001de8:	48001400 	.word	0x48001400
 8001dec:	40010400 	.word	0x40010400

08001df0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d141      	bne.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dfe:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e0a:	d131      	bne.n	8001e70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e0c:	4b47      	ldr	r3, [pc, #284]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e12:	4a46      	ldr	r2, [pc, #280]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1c:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e24:	4a41      	ldr	r2, [pc, #260]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e2c:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2232      	movs	r2, #50	; 0x32
 8001e32:	fb02 f303 	mul.w	r3, r2, r3
 8001e36:	4a3f      	ldr	r2, [pc, #252]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	0c9b      	lsrs	r3, r3, #18
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e42:	e002      	b.n	8001e4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e4a:	4b38      	ldr	r3, [pc, #224]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e56:	d102      	bne.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f2      	bne.n	8001e44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5e:	4b33      	ldr	r3, [pc, #204]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6a:	d158      	bne.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e057      	b.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e70:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e76:	4a2d      	ldr	r2, [pc, #180]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e80:	e04d      	b.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e88:	d141      	bne.n	8001f0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e96:	d131      	bne.n	8001efc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e98:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e9e:	4a23      	ldr	r2, [pc, #140]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ea8:	4b20      	ldr	r3, [pc, #128]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb0:	4a1e      	ldr	r2, [pc, #120]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2232      	movs	r2, #50	; 0x32
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	4a1c      	ldr	r2, [pc, #112]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	0c9b      	lsrs	r3, r3, #18
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ece:	e002      	b.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed6:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee2:	d102      	bne.n	8001eea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f2      	bne.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef6:	d112      	bne.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e011      	b.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f0c:	e007      	b.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	20000004 	.word	0x20000004
 8001f34:	431bde83 	.word	0x431bde83

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e2fe      	b.n	8002548 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d075      	beq.n	8002042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4b97      	ldr	r3, [pc, #604]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4b94      	ldr	r3, [pc, #592]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b0c      	cmp	r3, #12
 8001f6e:	d102      	bne.n	8001f76 <HAL_RCC_OscConfig+0x3e>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d002      	beq.n	8001f7c <HAL_RCC_OscConfig+0x44>
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4b8d      	ldr	r3, [pc, #564]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d05b      	beq.n	8002040 <HAL_RCC_OscConfig+0x108>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d157      	bne.n	8002040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e2d9      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x74>
 8001f9e:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a84      	ldr	r2, [pc, #528]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x98>
 8001fb6:	4b7f      	ldr	r3, [pc, #508]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a7e      	ldr	r2, [pc, #504]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b7c      	ldr	r3, [pc, #496]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a7b      	ldr	r2, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fd0:	4b78      	ldr	r3, [pc, #480]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a77      	ldr	r2, [pc, #476]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b75      	ldr	r3, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a74      	ldr	r2, [pc, #464]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fdcc 	bl	8000b8c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fdc8 	bl	8000b8c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e29e      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800200a:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xc0>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe fdb8 	bl	8000b8c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fdb4 	bl	8000b8c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e28a      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002032:	4b60      	ldr	r3, [pc, #384]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0xe8>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d075      	beq.n	800213a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800204e:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002058:	4b56      	ldr	r3, [pc, #344]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d102      	bne.n	800206e <HAL_RCC_OscConfig+0x136>
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d002      	beq.n	8002074 <HAL_RCC_OscConfig+0x13c>
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d11f      	bne.n	80020b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x154>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e25d      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208c:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	061b      	lsls	r3, r3, #24
 800209a:	4946      	ldr	r1, [pc, #280]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800209c:	4313      	orrs	r3, r2
 800209e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020a0:	4b45      	ldr	r3, [pc, #276]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fd25 	bl	8000af4 <HAL_InitTick>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d043      	beq.n	8002138 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e249      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d023      	beq.n	8002104 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b3d      	ldr	r3, [pc, #244]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3c      	ldr	r2, [pc, #240]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fd60 	bl	8000b8c <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe fd5c 	bl	8000b8c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e232      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020e2:	4b34      	ldr	r3, [pc, #208]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b31      	ldr	r3, [pc, #196]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	061b      	lsls	r3, r3, #24
 80020fc:	492d      	ldr	r1, [pc, #180]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
 8002102:	e01a      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800210a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002110:	f7fe fd3c 	bl	8000b8c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002118:	f7fe fd38 	bl	8000b8c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e20e      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x1e0>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b00      	cmp	r3, #0
 8002144:	d041      	beq.n	80021ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01c      	beq.n	8002188 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8002150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002154:	4a17      	ldr	r2, [pc, #92]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7fe fd15 	bl	8000b8c <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002166:	f7fe fd11 	bl	8000b8c <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1e7      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002178:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800217a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0ef      	beq.n	8002166 <HAL_RCC_OscConfig+0x22e>
 8002186:	e020      	b.n	80021ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002188:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_OscConfig+0x27c>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002198:	f7fe fcf8 	bl	8000b8c <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800219e:	e00d      	b.n	80021bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a0:	f7fe fcf4 	bl	8000b8c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d906      	bls.n	80021bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e1ca      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
 80021b2:	bf00      	nop
 80021b4:	40021000 	.word	0x40021000
 80021b8:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021bc:	4b8c      	ldr	r3, [pc, #560]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80021be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ea      	bne.n	80021a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f000 80a6 	beq.w	8002324 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021d8:	2300      	movs	r3, #0
 80021da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021dc:	4b84      	ldr	r3, [pc, #528]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RCC_OscConfig+0x2b4>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x2b6>
 80021ec:	2300      	movs	r3, #0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	4a7e      	ldr	r2, [pc, #504]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80021f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6593      	str	r3, [r2, #88]	; 0x58
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	60fb      	str	r3, [r7, #12]
 8002208:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220e:	4b79      	ldr	r3, [pc, #484]	; (80023f4 <HAL_RCC_OscConfig+0x4bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d118      	bne.n	800224c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800221a:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_OscConfig+0x4bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a75      	ldr	r2, [pc, #468]	; (80023f4 <HAL_RCC_OscConfig+0x4bc>)
 8002220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002226:	f7fe fcb1 	bl	8000b8c <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fcad 	bl	8000b8c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e183      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002240:	4b6c      	ldr	r3, [pc, #432]	; (80023f4 <HAL_RCC_OscConfig+0x4bc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002248:	2b00      	cmp	r3, #0
 800224a:	d0f0      	beq.n	800222e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d108      	bne.n	8002266 <HAL_RCC_OscConfig+0x32e>
 8002254:	4b66      	ldr	r3, [pc, #408]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225a:	4a65      	ldr	r2, [pc, #404]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002264:	e024      	b.n	80022b0 <HAL_RCC_OscConfig+0x378>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b05      	cmp	r3, #5
 800226c:	d110      	bne.n	8002290 <HAL_RCC_OscConfig+0x358>
 800226e:	4b60      	ldr	r3, [pc, #384]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002274:	4a5e      	ldr	r2, [pc, #376]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800227e:	4b5c      	ldr	r3, [pc, #368]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	4a5a      	ldr	r2, [pc, #360]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f043 0301 	orr.w	r3, r3, #1
 800228a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800228e:	e00f      	b.n	80022b0 <HAL_RCC_OscConfig+0x378>
 8002290:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022a0:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d016      	beq.n	80022e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b8:	f7fe fc68 	bl	8000b8c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c0:	f7fe fc64 	bl	8000b8c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e138      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0ed      	beq.n	80022c0 <HAL_RCC_OscConfig+0x388>
 80022e4:	e015      	b.n	8002312 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fc51 	bl	8000b8c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fc4d 	bl	8000b8c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e121      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002304:	4b3a      	ldr	r3, [pc, #232]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ed      	bne.n	80022ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002312:	7ffb      	ldrb	r3, [r7, #31]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d105      	bne.n	8002324 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002318:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	4a34      	ldr	r2, [pc, #208]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 800231e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002322:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0320 	and.w	r3, r3, #32
 800232c:	2b00      	cmp	r3, #0
 800232e:	d03c      	beq.n	80023aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01c      	beq.n	8002372 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 800233a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800233e:	4a2c      	ldr	r2, [pc, #176]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002348:	f7fe fc20 	bl	8000b8c <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002350:	f7fe fc1c 	bl	8000b8c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e0f2      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0ef      	beq.n	8002350 <HAL_RCC_OscConfig+0x418>
 8002370:	e01b      	b.n	80023aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 8002374:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7fe fc03 	bl	8000b8c <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238a:	f7fe fbff 	bl	8000b8c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0d5      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800239c:	4b14      	ldr	r3, [pc, #80]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 800239e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1ef      	bne.n	800238a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 80c9 	beq.w	8002546 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b4:	4b0e      	ldr	r3, [pc, #56]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b0c      	cmp	r3, #12
 80023be:	f000 8083 	beq.w	80024c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d15e      	bne.n	8002488 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_RCC_OscConfig+0x4b8>)
 80023d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fbd9 	bl	8000b8c <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023dc:	e00c      	b.n	80023f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe fbd5 	bl	8000b8c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d905      	bls.n	80023f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e0ab      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1ec      	bne.n	80023de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	4b52      	ldr	r3, [pc, #328]	; (8002554 <HAL_RCC_OscConfig+0x61c>)
 800240a:	4013      	ands	r3, r2
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6a11      	ldr	r1, [r2, #32]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002414:	3a01      	subs	r2, #1
 8002416:	0112      	lsls	r2, r2, #4
 8002418:	4311      	orrs	r1, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800241e:	0212      	lsls	r2, r2, #8
 8002420:	4311      	orrs	r1, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002426:	0852      	lsrs	r2, r2, #1
 8002428:	3a01      	subs	r2, #1
 800242a:	0552      	lsls	r2, r2, #21
 800242c:	4311      	orrs	r1, r2
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002432:	0852      	lsrs	r2, r2, #1
 8002434:	3a01      	subs	r2, #1
 8002436:	0652      	lsls	r2, r2, #25
 8002438:	4311      	orrs	r1, r2
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800243e:	06d2      	lsls	r2, r2, #27
 8002440:	430a      	orrs	r2, r1
 8002442:	4943      	ldr	r1, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 8002444:	4313      	orrs	r3, r2
 8002446:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002448:	4b41      	ldr	r3, [pc, #260]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a40      	ldr	r2, [pc, #256]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 800244e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002452:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002454:	4b3e      	ldr	r3, [pc, #248]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	4a3d      	ldr	r2, [pc, #244]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 800245a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fb94 	bl	8000b8c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fb90 	bl	8000b8c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e066      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800247a:	4b35      	ldr	r3, [pc, #212]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x530>
 8002486:	e05e      	b.n	8002546 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a30      	ldr	r2, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 800248e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7fe fb7a 	bl	8000b8c <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249c:	f7fe fb76 	bl	8000b8c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e04c      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ae:	4b28      	ldr	r3, [pc, #160]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024ba:	4b25      	ldr	r3, [pc, #148]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	4924      	ldr	r1, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 80024c0:	4b25      	ldr	r3, [pc, #148]	; (8002558 <HAL_RCC_OscConfig+0x620>)
 80024c2:	4013      	ands	r3, r2
 80024c4:	60cb      	str	r3, [r1, #12]
 80024c6:	e03e      	b.n	8002546 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e039      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024d4:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_RCC_OscConfig+0x618>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 0203 	and.w	r2, r3, #3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a1b      	ldr	r3, [r3, #32]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d12c      	bne.n	8002542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	3b01      	subs	r3, #1
 80024f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d123      	bne.n	8002542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002506:	429a      	cmp	r2, r3
 8002508:	d11b      	bne.n	8002542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d113      	bne.n	8002542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	085b      	lsrs	r3, r3, #1
 8002526:	3b01      	subs	r3, #1
 8002528:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800252a:	429a      	cmp	r2, r3
 800252c:	d109      	bne.n	8002542 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	085b      	lsrs	r3, r3, #1
 800253a:	3b01      	subs	r3, #1
 800253c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800253e:	429a      	cmp	r2, r3
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40021000 	.word	0x40021000
 8002554:	019f800c 	.word	0x019f800c
 8002558:	feeefffc 	.word	0xfeeefffc

0800255c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e11e      	b.n	80027b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b91      	ldr	r3, [pc, #580]	; (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b8e      	ldr	r3, [pc, #568]	; (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 020f 	bic.w	r2, r3, #15
 800258a:	498c      	ldr	r1, [pc, #560]	; (80027bc <HAL_RCC_ClockConfig+0x260>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b8a      	ldr	r3, [pc, #552]	; (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e106      	b.n	80027b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d073      	beq.n	8002698 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d129      	bne.n	800260c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b8:	4b81      	ldr	r3, [pc, #516]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0f4      	b.n	80027b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025c8:	f000 f99e 	bl	8002908 <RCC_GetSysClockFreqFromPLLSource>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4a7c      	ldr	r2, [pc, #496]	; (80027c4 <HAL_RCC_ClockConfig+0x268>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d93f      	bls.n	8002656 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025d6:	4b7a      	ldr	r3, [pc, #488]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d009      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d033      	beq.n	8002656 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d12f      	bne.n	8002656 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025f6:	4b72      	ldr	r3, [pc, #456]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025fe:	4a70      	ldr	r2, [pc, #448]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002604:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	e024      	b.n	8002656 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d107      	bne.n	8002624 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002614:	4b6a      	ldr	r3, [pc, #424]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d109      	bne.n	8002634 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0c6      	b.n	80027b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002624:	4b66      	ldr	r3, [pc, #408]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0be      	b.n	80027b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002634:	f000 f8ce 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002638:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4a61      	ldr	r2, [pc, #388]	; (80027c4 <HAL_RCC_ClockConfig+0x268>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d909      	bls.n	8002656 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002642:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800264a:	4a5d      	ldr	r2, [pc, #372]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 800264c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002650:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002652:	2380      	movs	r3, #128	; 0x80
 8002654:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002656:	4b5a      	ldr	r3, [pc, #360]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f023 0203 	bic.w	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	4957      	ldr	r1, [pc, #348]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002664:	4313      	orrs	r3, r2
 8002666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002668:	f7fe fa90 	bl	8000b8c <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800266e:	e00a      	b.n	8002686 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002670:	f7fe fa8c 	bl	8000b8c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f241 3288 	movw	r2, #5000	; 0x1388
 800267e:	4293      	cmp	r3, r2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e095      	b.n	80027b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002686:	4b4e      	ldr	r3, [pc, #312]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f003 020c 	and.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	429a      	cmp	r2, r3
 8002696:	d1eb      	bne.n	8002670 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d023      	beq.n	80026ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026b0:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4a42      	ldr	r2, [pc, #264]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80026b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026c8:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80026d0:	4a3b      	ldr	r2, [pc, #236]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80026d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026d8:	4b39      	ldr	r3, [pc, #228]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4936      	ldr	r1, [pc, #216]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	608b      	str	r3, [r1, #8]
 80026ea:	e008      	b.n	80026fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	2b80      	cmp	r3, #128	; 0x80
 80026f0:	d105      	bne.n	80026fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026f2:	4b33      	ldr	r3, [pc, #204]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	4a32      	ldr	r2, [pc, #200]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 80026f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d21d      	bcs.n	8002748 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270c:	4b2b      	ldr	r3, [pc, #172]	; (80027bc <HAL_RCC_ClockConfig+0x260>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 020f 	bic.w	r2, r3, #15
 8002714:	4929      	ldr	r1, [pc, #164]	; (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800271c:	f7fe fa36 	bl	8000b8c <HAL_GetTick>
 8002720:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	e00a      	b.n	800273a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002724:	f7fe fa32 	bl	8000b8c <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002732:	4293      	cmp	r3, r2
 8002734:	d901      	bls.n	800273a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e03b      	b.n	80027b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <HAL_RCC_ClockConfig+0x260>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d1ed      	bne.n	8002724 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d008      	beq.n	8002766 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4917      	ldr	r1, [pc, #92]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d009      	beq.n	8002786 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002772:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	490f      	ldr	r1, [pc, #60]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 8002782:	4313      	orrs	r3, r2
 8002784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002786:	f000 f825 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800278a:	4602      	mov	r2, r0
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_RCC_ClockConfig+0x264>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 030f 	and.w	r3, r3, #15
 8002796:	490c      	ldr	r1, [pc, #48]	; (80027c8 <HAL_RCC_ClockConfig+0x26c>)
 8002798:	5ccb      	ldrb	r3, [r1, r3]
 800279a:	f003 031f 	and.w	r3, r3, #31
 800279e:	fa22 f303 	lsr.w	r3, r2, r3
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x270>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x274>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe f9a2 	bl	8000af4 <HAL_InitTick>
 80027b0:	4603      	mov	r3, r0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40022000 	.word	0x40022000
 80027c0:	40021000 	.word	0x40021000
 80027c4:	04c4b400 	.word	0x04c4b400
 80027c8:	080041b8 	.word	0x080041b8
 80027cc:	20000004 	.word	0x20000004
 80027d0:	20000008 	.word	0x20000008

080027d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d102      	bne.n	80027ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	e047      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027ec:	4b27      	ldr	r3, [pc, #156]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	2b08      	cmp	r3, #8
 80027f6:	d102      	bne.n	80027fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027f8:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	e03e      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027fe:	4b23      	ldr	r3, [pc, #140]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b0c      	cmp	r3, #12
 8002808:	d136      	bne.n	8002878 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002814:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	091b      	lsrs	r3, r3, #4
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	3301      	adds	r3, #1
 8002820:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002828:	4a1a      	ldr	r2, [pc, #104]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc0>)
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002830:	4a16      	ldr	r2, [pc, #88]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002832:	68d2      	ldr	r2, [r2, #12]
 8002834:	0a12      	lsrs	r2, r2, #8
 8002836:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	617b      	str	r3, [r7, #20]
      break;
 8002840:	e00c      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002842:	4a13      	ldr	r2, [pc, #76]	; (8002890 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	4a10      	ldr	r2, [pc, #64]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	0a12      	lsrs	r2, r2, #8
 8002850:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002854:	fb02 f303 	mul.w	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]
      break;
 800285a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_GetSysClockFreq+0xb8>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	0e5b      	lsrs	r3, r3, #25
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	3301      	adds	r3, #1
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	fbb2 f3f3 	udiv	r3, r2, r3
 8002874:	613b      	str	r3, [r7, #16]
 8002876:	e001      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800287c:	693b      	ldr	r3, [r7, #16]
}
 800287e:	4618      	mov	r0, r3
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40021000 	.word	0x40021000
 8002890:	00f42400 	.word	0x00f42400
 8002894:	016e3600 	.word	0x016e3600

08002898 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b03      	ldr	r3, [pc, #12]	; (80028ac <HAL_RCC_GetHCLKFreq+0x14>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028b4:	f7ff fff0 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	4904      	ldr	r1, [pc, #16]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	080041c8 	.word	0x080041c8

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028e0:	f7ff ffda 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0adb      	lsrs	r3, r3, #11
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4904      	ldr	r1, [pc, #16]	; (8002904 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40021000 	.word	0x40021000
 8002904:	080041c8 	.word	0x080041c8

08002908 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b087      	sub	sp, #28
 800290c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3301      	adds	r3, #1
 8002924:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b03      	cmp	r3, #3
 800292a:	d10c      	bne.n	8002946 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800292c:	4a17      	ldr	r2, [pc, #92]	; (800298c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002936:	68d2      	ldr	r2, [r2, #12]
 8002938:	0a12      	lsrs	r2, r2, #8
 800293a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800293e:	fb02 f303 	mul.w	r3, r2, r3
 8002942:	617b      	str	r3, [r7, #20]
    break;
 8002944:	e00c      	b.n	8002960 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	4a0e      	ldr	r2, [pc, #56]	; (8002988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002950:	68d2      	ldr	r2, [r2, #12]
 8002952:	0a12      	lsrs	r2, r2, #8
 8002954:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002958:	fb02 f303 	mul.w	r3, r2, r3
 800295c:	617b      	str	r3, [r7, #20]
    break;
 800295e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002960:	4b09      	ldr	r3, [pc, #36]	; (8002988 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0e5b      	lsrs	r3, r3, #25
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	3301      	adds	r3, #1
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	fbb2 f3f3 	udiv	r3, r2, r3
 8002978:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800297a:	687b      	ldr	r3, [r7, #4]
}
 800297c:	4618      	mov	r0, r3
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40021000 	.word	0x40021000
 800298c:	016e3600 	.word	0x016e3600
 8002990:	00f42400 	.word	0x00f42400

08002994 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800299c:	2300      	movs	r3, #0
 800299e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029a0:	2300      	movs	r3, #0
 80029a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8098 	beq.w	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029b2:	2300      	movs	r3, #0
 80029b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b6:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b40      	ldr	r3, [pc, #256]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c6:	4a3f      	ldr	r2, [pc, #252]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029cc:	6593      	str	r3, [r2, #88]	; 0x58
 80029ce:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029da:	2301      	movs	r3, #1
 80029dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029de:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a39      	ldr	r2, [pc, #228]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ea:	f7fe f8cf 	bl	8000b8c <HAL_GetTick>
 80029ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029f0:	e009      	b.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f2:	f7fe f8cb 	bl	8000b8c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d902      	bls.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	74fb      	strb	r3, [r7, #19]
        break;
 8002a04:	e005      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a06:	4b30      	ldr	r3, [pc, #192]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0ef      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a12:	7cfb      	ldrb	r3, [r7, #19]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d159      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a18:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a22:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01e      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d019      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a34:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a50:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a56:	4a1b      	ldr	r2, [pc, #108]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a60:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe f88b 	bl	8000b8c <HAL_GetTick>
 8002a76:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a78:	e00b      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7fe f887 	bl	8000b8c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d902      	bls.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a90:	e006      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ec      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10b      	bne.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa6:	4b07      	ldr	r3, [pc, #28]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	4903      	ldr	r1, [pc, #12]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002abc:	e008      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002abe:	7cfb      	ldrb	r3, [r7, #19]
 8002ac0:	74bb      	strb	r3, [r7, #18]
 8002ac2:	e005      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ad0:	7c7b      	ldrb	r3, [r7, #17]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad6:	4ba6      	ldr	r3, [pc, #664]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	4aa5      	ldr	r2, [pc, #660]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aee:	4ba0      	ldr	r3, [pc, #640]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	f023 0203 	bic.w	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	499c      	ldr	r1, [pc, #624]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b10:	4b97      	ldr	r3, [pc, #604]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f023 020c 	bic.w	r2, r3, #12
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	4994      	ldr	r1, [pc, #592]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0304 	and.w	r3, r3, #4
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b32:	4b8f      	ldr	r3, [pc, #572]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	498b      	ldr	r1, [pc, #556]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0308 	and.w	r3, r3, #8
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b54:	4b86      	ldr	r3, [pc, #536]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	4983      	ldr	r1, [pc, #524]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b76:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	497a      	ldr	r1, [pc, #488]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b98:	4b75      	ldr	r3, [pc, #468]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	4972      	ldr	r1, [pc, #456]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bba:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4969      	ldr	r1, [pc, #420]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bdc:	4b64      	ldr	r3, [pc, #400]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4961      	ldr	r1, [pc, #388]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bfe:	4b5c      	ldr	r3, [pc, #368]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	4958      	ldr	r1, [pc, #352]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	4950      	ldr	r1, [pc, #320]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3e:	d105      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a4a      	ldr	r2, [pc, #296]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c58:	4b45      	ldr	r3, [pc, #276]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	4942      	ldr	r1, [pc, #264]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c78:	4b3d      	ldr	r3, [pc, #244]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a3c      	ldr	r2, [pc, #240]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c82:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c90:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9e:	4934      	ldr	r1, [pc, #208]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cae:	d105      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb0:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a2e      	ldr	r2, [pc, #184]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cba:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd6:	4926      	ldr	r1, [pc, #152]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce8:	4b21      	ldr	r3, [pc, #132]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d015      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d00:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0e:	4918      	ldr	r1, [pc, #96]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d1e:	d105      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d38:	4b0d      	ldr	r3, [pc, #52]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	490a      	ldr	r1, [pc, #40]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d56:	d105      	bne.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	4a04      	ldr	r2, [pc, #16]	; (8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d62:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d64:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	40021000 	.word	0x40021000

08002d74 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e04a      	b.n	8002e1c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7fd fdaf 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2224      	movs	r2, #36	; 0x24
 8002da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fe40 	bl	8003a44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fb71 	bl	80034ac <UART_SetConfig>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e023      	b.n	8002e1c <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8002df2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0208 	orr.w	r2, r2, #8
 8002e02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 feb7 	bl	8003b88 <UART_CheckIdleState>
 8002e1a:	4603      	mov	r3, r0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b0ba      	sub	sp, #232	; 0xe8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002e4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e52:	4013      	ands	r3, r2
 8002e54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11b      	bne.n	8002e98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d015      	beq.n	8002e98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d009      	beq.n	8002e98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f000 82e3 	beq.w	8003454 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	4798      	blx	r3
      }
      return;
 8002e96:	e2dd      	b.n	8003454 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8123 	beq.w	80030e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ea2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <HAL_UART_IRQHandler+0x2b8>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d106      	bne.n	8002ebc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002eae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002eb2:	4b8b      	ldr	r3, [pc, #556]	; (80030e0 <HAL_UART_IRQHandler+0x2bc>)
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8116 	beq.w	80030e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d011      	beq.n	8002eec <HAL_UART_IRQHandler+0xc8>
 8002ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee2:	f043 0201 	orr.w	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d011      	beq.n	8002f1c <HAL_UART_IRQHandler+0xf8>
 8002ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d011      	beq.n	8002f4c <HAL_UART_IRQHandler+0x128>
 8002f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00b      	beq.n	8002f4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f42:	f043 0202 	orr.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f50:	f003 0308 	and.w	r3, r3, #8
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d017      	beq.n	8002f88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f68:	4b5c      	ldr	r3, [pc, #368]	; (80030dc <HAL_UART_IRQHandler+0x2b8>)
 8002f6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2208      	movs	r2, #8
 8002f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f7e:	f043 0208 	orr.w	r2, r3, #8
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d012      	beq.n	8002fba <HAL_UART_IRQHandler+0x196>
 8002f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00c      	beq.n	8002fba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8249 	beq.w	8003458 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fca:	f003 0320 	and.w	r3, r3, #32
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d013      	beq.n	8002ffa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd6:	f003 0320 	and.w	r3, r3, #32
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d005      	beq.n	800301e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003016:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800301a:	2b00      	cmp	r3, #0
 800301c:	d054      	beq.n	80030c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fec9 	bl	8003db6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b40      	cmp	r3, #64	; 0x40
 8003030:	d146      	bne.n	80030c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3308      	adds	r3, #8
 8003038:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800304c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	3308      	adds	r3, #8
 800305a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800305e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800306a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800306e:	e841 2300 	strex	r3, r2, [r1]
 8003072:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1d9      	bne.n	8003032 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003084:	2b00      	cmp	r3, #0
 8003086:	d017      	beq.n	80030b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800308e:	4a15      	ldr	r2, [pc, #84]	; (80030e4 <HAL_UART_IRQHandler+0x2c0>)
 8003090:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd ff0d 	bl	8000eb8 <HAL_DMA_Abort_IT>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d019      	beq.n	80030d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80030b2:	4610      	mov	r0, r2
 80030b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b6:	e00f      	b.n	80030d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f9e1 	bl	8003480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030be:	e00b      	b.n	80030d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f9dd 	bl	8003480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c6:	e007      	b.n	80030d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f9d9 	bl	8003480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80030d6:	e1bf      	b.n	8003458 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d8:	bf00      	nop
    return;
 80030da:	e1bd      	b.n	8003458 <HAL_UART_IRQHandler+0x634>
 80030dc:	10000001 	.word	0x10000001
 80030e0:	04000120 	.word	0x04000120
 80030e4:	08003e83 	.word	0x08003e83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 8153 	bne.w	8003398 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 814c 	beq.w	8003398 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003104:	f003 0310 	and.w	r3, r3, #16
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 8145 	beq.w	8003398 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2210      	movs	r2, #16
 8003114:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	f040 80bb 	bne.w	800329c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003134:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 818f 	beq.w	800345c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003144:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003148:	429a      	cmp	r2, r3
 800314a:	f080 8187 	bcs.w	800345c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003154:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0320 	and.w	r3, r3, #32
 8003166:	2b00      	cmp	r3, #0
 8003168:	f040 8087 	bne.w	800327a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003174:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003178:	e853 3f00 	ldrex	r3, [r3]
 800317c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003180:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003196:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800319a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031a6:	e841 2300 	strex	r3, r2, [r1]
 80031aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80031ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1da      	bne.n	800316c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3308      	adds	r3, #8
 80031bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80031c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	3308      	adds	r3, #8
 80031d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80031da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80031de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80031e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80031e6:	e841 2300 	strex	r3, r2, [r1]
 80031ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80031ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1e1      	bne.n	80031b6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	3308      	adds	r3, #8
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031fc:	e853 3f00 	ldrex	r3, [r3]
 8003200:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003208:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3308      	adds	r3, #8
 8003212:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003216:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003218:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800321c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003224:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003226:	2b00      	cmp	r3, #0
 8003228:	d1e3      	bne.n	80031f2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003248:	f023 0310 	bic.w	r3, r3, #16
 800324c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800325a:	65bb      	str	r3, [r7, #88]	; 0x58
 800325c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e4      	bne.n	8003238 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd fdc6 	bl	8000e06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2202      	movs	r2, #2
 800327e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800328c:	b29b      	uxth	r3, r3
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	b29b      	uxth	r3, r3
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 f8fd 	bl	8003494 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800329a:	e0df      	b.n	800345c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80d1 	beq.w	8003460 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80032be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80cc 	beq.w	8003460 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d0:	e853 3f00 	ldrex	r3, [r3]
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032ea:	647b      	str	r3, [r7, #68]	; 0x44
 80032ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80032f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80032f2:	e841 2300 	strex	r3, r2, [r1]
 80032f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80032f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e4      	bne.n	80032c8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3308      	adds	r3, #8
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	e853 3f00 	ldrex	r3, [r3]
 800330c:	623b      	str	r3, [r7, #32]
   return(result);
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	f023 0301 	bic.w	r3, r3, #1
 8003318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	3308      	adds	r3, #8
 8003322:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003326:	633a      	str	r2, [r7, #48]	; 0x30
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800332c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e1      	bne.n	80032fe <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	e853 3f00 	ldrex	r3, [r3]
 800335a:	60fb      	str	r3, [r7, #12]
   return(result);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f023 0310 	bic.w	r3, r3, #16
 8003362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003370:	61fb      	str	r3, [r7, #28]
 8003372:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	69b9      	ldr	r1, [r7, #24]
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	617b      	str	r3, [r7, #20]
   return(result);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e4      	bne.n	800334e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800338a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f87f 	bl	8003494 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003396:	e063      	b.n	8003460 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00e      	beq.n	80033c2 <HAL_UART_IRQHandler+0x59e>
 80033a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 fda2 	bl	8003f04 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033c0:	e051      	b.n	8003466 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80033c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d014      	beq.n	80033f8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80033ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d105      	bne.n	80033e6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80033da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d03a      	beq.n	8003464 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
    }
    return;
 80033f6:	e035      	b.n	8003464 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d009      	beq.n	8003418 <HAL_UART_IRQHandler+0x5f4>
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fd4c 	bl	8003eae <UART_EndTransmit_IT>
    return;
 8003416:	e026      	b.n	8003466 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <HAL_UART_IRQHandler+0x614>
 8003424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fd7b 	bl	8003f2c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003436:	e016      	b.n	8003466 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800343c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d010      	beq.n	8003466 <HAL_UART_IRQHandler+0x642>
 8003444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003448:	2b00      	cmp	r3, #0
 800344a:	da0c      	bge.n	8003466 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 fd63 	bl	8003f18 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003452:	e008      	b.n	8003466 <HAL_UART_IRQHandler+0x642>
      return;
 8003454:	bf00      	nop
 8003456:	e006      	b.n	8003466 <HAL_UART_IRQHandler+0x642>
    return;
 8003458:	bf00      	nop
 800345a:	e004      	b.n	8003466 <HAL_UART_IRQHandler+0x642>
      return;
 800345c:	bf00      	nop
 800345e:	e002      	b.n	8003466 <HAL_UART_IRQHandler+0x642>
      return;
 8003460:	bf00      	nop
 8003462:	e000      	b.n	8003466 <HAL_UART_IRQHandler+0x642>
    return;
 8003464:	bf00      	nop
  }
}
 8003466:	37e8      	adds	r7, #232	; 0xe8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b0:	b08c      	sub	sp, #48	; 0x30
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4bab      	ldr	r3, [pc, #684]	; (8003788 <UART_SetConfig+0x2dc>)
 80034dc:	4013      	ands	r3, r2
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e4:	430b      	orrs	r3, r1
 80034e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4aa0      	ldr	r2, [pc, #640]	; (800378c <UART_SetConfig+0x2e0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003514:	4313      	orrs	r3, r2
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003522:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800352c:	430b      	orrs	r3, r1
 800352e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003536:	f023 010f 	bic.w	r1, r3, #15
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a91      	ldr	r2, [pc, #580]	; (8003790 <UART_SetConfig+0x2e4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d125      	bne.n	800359c <UART_SetConfig+0xf0>
 8003550:	4b90      	ldr	r3, [pc, #576]	; (8003794 <UART_SetConfig+0x2e8>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b03      	cmp	r3, #3
 800355c:	d81a      	bhi.n	8003594 <UART_SetConfig+0xe8>
 800355e:	a201      	add	r2, pc, #4	; (adr r2, 8003564 <UART_SetConfig+0xb8>)
 8003560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003564:	08003575 	.word	0x08003575
 8003568:	08003585 	.word	0x08003585
 800356c:	0800357d 	.word	0x0800357d
 8003570:	0800358d 	.word	0x0800358d
 8003574:	2301      	movs	r3, #1
 8003576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800357a:	e0d6      	b.n	800372a <UART_SetConfig+0x27e>
 800357c:	2302      	movs	r3, #2
 800357e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003582:	e0d2      	b.n	800372a <UART_SetConfig+0x27e>
 8003584:	2304      	movs	r3, #4
 8003586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800358a:	e0ce      	b.n	800372a <UART_SetConfig+0x27e>
 800358c:	2308      	movs	r3, #8
 800358e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003592:	e0ca      	b.n	800372a <UART_SetConfig+0x27e>
 8003594:	2310      	movs	r3, #16
 8003596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800359a:	e0c6      	b.n	800372a <UART_SetConfig+0x27e>
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7d      	ldr	r2, [pc, #500]	; (8003798 <UART_SetConfig+0x2ec>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d138      	bne.n	8003618 <UART_SetConfig+0x16c>
 80035a6:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <UART_SetConfig+0x2e8>)
 80035a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b0c      	cmp	r3, #12
 80035b2:	d82d      	bhi.n	8003610 <UART_SetConfig+0x164>
 80035b4:	a201      	add	r2, pc, #4	; (adr r2, 80035bc <UART_SetConfig+0x110>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035f1 	.word	0x080035f1
 80035c0:	08003611 	.word	0x08003611
 80035c4:	08003611 	.word	0x08003611
 80035c8:	08003611 	.word	0x08003611
 80035cc:	08003601 	.word	0x08003601
 80035d0:	08003611 	.word	0x08003611
 80035d4:	08003611 	.word	0x08003611
 80035d8:	08003611 	.word	0x08003611
 80035dc:	080035f9 	.word	0x080035f9
 80035e0:	08003611 	.word	0x08003611
 80035e4:	08003611 	.word	0x08003611
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003609 	.word	0x08003609
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035f6:	e098      	b.n	800372a <UART_SetConfig+0x27e>
 80035f8:	2302      	movs	r3, #2
 80035fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035fe:	e094      	b.n	800372a <UART_SetConfig+0x27e>
 8003600:	2304      	movs	r3, #4
 8003602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003606:	e090      	b.n	800372a <UART_SetConfig+0x27e>
 8003608:	2308      	movs	r3, #8
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360e:	e08c      	b.n	800372a <UART_SetConfig+0x27e>
 8003610:	2310      	movs	r3, #16
 8003612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003616:	e088      	b.n	800372a <UART_SetConfig+0x27e>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a5f      	ldr	r2, [pc, #380]	; (800379c <UART_SetConfig+0x2f0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d125      	bne.n	800366e <UART_SetConfig+0x1c2>
 8003622:	4b5c      	ldr	r3, [pc, #368]	; (8003794 <UART_SetConfig+0x2e8>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800362c:	2b30      	cmp	r3, #48	; 0x30
 800362e:	d016      	beq.n	800365e <UART_SetConfig+0x1b2>
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d818      	bhi.n	8003666 <UART_SetConfig+0x1ba>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d00a      	beq.n	800364e <UART_SetConfig+0x1a2>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d814      	bhi.n	8003666 <UART_SetConfig+0x1ba>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d002      	beq.n	8003646 <UART_SetConfig+0x19a>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d008      	beq.n	8003656 <UART_SetConfig+0x1aa>
 8003644:	e00f      	b.n	8003666 <UART_SetConfig+0x1ba>
 8003646:	2300      	movs	r3, #0
 8003648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800364c:	e06d      	b.n	800372a <UART_SetConfig+0x27e>
 800364e:	2302      	movs	r3, #2
 8003650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003654:	e069      	b.n	800372a <UART_SetConfig+0x27e>
 8003656:	2304      	movs	r3, #4
 8003658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800365c:	e065      	b.n	800372a <UART_SetConfig+0x27e>
 800365e:	2308      	movs	r3, #8
 8003660:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003664:	e061      	b.n	800372a <UART_SetConfig+0x27e>
 8003666:	2310      	movs	r3, #16
 8003668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800366c:	e05d      	b.n	800372a <UART_SetConfig+0x27e>
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a4b      	ldr	r2, [pc, #300]	; (80037a0 <UART_SetConfig+0x2f4>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d125      	bne.n	80036c4 <UART_SetConfig+0x218>
 8003678:	4b46      	ldr	r3, [pc, #280]	; (8003794 <UART_SetConfig+0x2e8>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003682:	2bc0      	cmp	r3, #192	; 0xc0
 8003684:	d016      	beq.n	80036b4 <UART_SetConfig+0x208>
 8003686:	2bc0      	cmp	r3, #192	; 0xc0
 8003688:	d818      	bhi.n	80036bc <UART_SetConfig+0x210>
 800368a:	2b80      	cmp	r3, #128	; 0x80
 800368c:	d00a      	beq.n	80036a4 <UART_SetConfig+0x1f8>
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d814      	bhi.n	80036bc <UART_SetConfig+0x210>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d002      	beq.n	800369c <UART_SetConfig+0x1f0>
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d008      	beq.n	80036ac <UART_SetConfig+0x200>
 800369a:	e00f      	b.n	80036bc <UART_SetConfig+0x210>
 800369c:	2300      	movs	r3, #0
 800369e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a2:	e042      	b.n	800372a <UART_SetConfig+0x27e>
 80036a4:	2302      	movs	r3, #2
 80036a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036aa:	e03e      	b.n	800372a <UART_SetConfig+0x27e>
 80036ac:	2304      	movs	r3, #4
 80036ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b2:	e03a      	b.n	800372a <UART_SetConfig+0x27e>
 80036b4:	2308      	movs	r3, #8
 80036b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ba:	e036      	b.n	800372a <UART_SetConfig+0x27e>
 80036bc:	2310      	movs	r3, #16
 80036be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036c2:	e032      	b.n	800372a <UART_SetConfig+0x27e>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a30      	ldr	r2, [pc, #192]	; (800378c <UART_SetConfig+0x2e0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d12a      	bne.n	8003724 <UART_SetConfig+0x278>
 80036ce:	4b31      	ldr	r3, [pc, #196]	; (8003794 <UART_SetConfig+0x2e8>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036dc:	d01a      	beq.n	8003714 <UART_SetConfig+0x268>
 80036de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036e2:	d81b      	bhi.n	800371c <UART_SetConfig+0x270>
 80036e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e8:	d00c      	beq.n	8003704 <UART_SetConfig+0x258>
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d815      	bhi.n	800371c <UART_SetConfig+0x270>
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <UART_SetConfig+0x250>
 80036f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f8:	d008      	beq.n	800370c <UART_SetConfig+0x260>
 80036fa:	e00f      	b.n	800371c <UART_SetConfig+0x270>
 80036fc:	2300      	movs	r3, #0
 80036fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003702:	e012      	b.n	800372a <UART_SetConfig+0x27e>
 8003704:	2302      	movs	r3, #2
 8003706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800370a:	e00e      	b.n	800372a <UART_SetConfig+0x27e>
 800370c:	2304      	movs	r3, #4
 800370e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003712:	e00a      	b.n	800372a <UART_SetConfig+0x27e>
 8003714:	2308      	movs	r3, #8
 8003716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800371a:	e006      	b.n	800372a <UART_SetConfig+0x27e>
 800371c:	2310      	movs	r3, #16
 800371e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003722:	e002      	b.n	800372a <UART_SetConfig+0x27e>
 8003724:	2310      	movs	r3, #16
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <UART_SetConfig+0x2e0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	f040 80a8 	bne.w	8003886 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003736:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800373a:	2b08      	cmp	r3, #8
 800373c:	d834      	bhi.n	80037a8 <UART_SetConfig+0x2fc>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x298>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003769 	.word	0x08003769
 8003748:	080037a9 	.word	0x080037a9
 800374c:	08003771 	.word	0x08003771
 8003750:	080037a9 	.word	0x080037a9
 8003754:	08003777 	.word	0x08003777
 8003758:	080037a9 	.word	0x080037a9
 800375c:	080037a9 	.word	0x080037a9
 8003760:	080037a9 	.word	0x080037a9
 8003764:	0800377f 	.word	0x0800377f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7ff f8a2 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 800376c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376e:	e021      	b.n	80037b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <UART_SetConfig+0x2f8>)
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003774:	e01e      	b.n	80037b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003776:	f7ff f82d 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800377c:	e01a      	b.n	80037b4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003784:	e016      	b.n	80037b4 <UART_SetConfig+0x308>
 8003786:	bf00      	nop
 8003788:	cfff69f3 	.word	0xcfff69f3
 800378c:	40008000 	.word	0x40008000
 8003790:	40013800 	.word	0x40013800
 8003794:	40021000 	.word	0x40021000
 8003798:	40004400 	.word	0x40004400
 800379c:	40004800 	.word	0x40004800
 80037a0:	40004c00 	.word	0x40004c00
 80037a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 812a 	beq.w	8003a10 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	4a9e      	ldr	r2, [pc, #632]	; (8003a3c <UART_SetConfig+0x590>)
 80037c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037c6:	461a      	mov	r2, r3
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	4613      	mov	r3, r2
 80037d6:	005b      	lsls	r3, r3, #1
 80037d8:	4413      	add	r3, r2
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d305      	bcc.n	80037ec <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d903      	bls.n	80037f4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80037f2:	e10d      	b.n	8003a10 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	2200      	movs	r2, #0
 80037f8:	60bb      	str	r3, [r7, #8]
 80037fa:	60fa      	str	r2, [r7, #12]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	4a8e      	ldr	r2, [pc, #568]	; (8003a3c <UART_SetConfig+0x590>)
 8003802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003806:	b29b      	uxth	r3, r3
 8003808:	2200      	movs	r2, #0
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003816:	f7fc fcff 	bl	8000218 <__aeabi_uldivmod>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	f04f 0200 	mov.w	r2, #0
 8003826:	f04f 0300 	mov.w	r3, #0
 800382a:	020b      	lsls	r3, r1, #8
 800382c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003830:	0202      	lsls	r2, r0, #8
 8003832:	6979      	ldr	r1, [r7, #20]
 8003834:	6849      	ldr	r1, [r1, #4]
 8003836:	0849      	lsrs	r1, r1, #1
 8003838:	2000      	movs	r0, #0
 800383a:	460c      	mov	r4, r1
 800383c:	4605      	mov	r5, r0
 800383e:	eb12 0804 	adds.w	r8, r2, r4
 8003842:	eb43 0905 	adc.w	r9, r3, r5
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	469a      	mov	sl, r3
 800384e:	4693      	mov	fp, r2
 8003850:	4652      	mov	r2, sl
 8003852:	465b      	mov	r3, fp
 8003854:	4640      	mov	r0, r8
 8003856:	4649      	mov	r1, r9
 8003858:	f7fc fcde 	bl	8000218 <__aeabi_uldivmod>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4613      	mov	r3, r2
 8003862:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800386a:	d308      	bcc.n	800387e <UART_SetConfig+0x3d2>
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003872:	d204      	bcs.n	800387e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6a3a      	ldr	r2, [r7, #32]
 800387a:	60da      	str	r2, [r3, #12]
 800387c:	e0c8      	b.n	8003a10 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003884:	e0c4      	b.n	8003a10 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	69db      	ldr	r3, [r3, #28]
 800388a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388e:	d167      	bne.n	8003960 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003894:	2b08      	cmp	r3, #8
 8003896:	d828      	bhi.n	80038ea <UART_SetConfig+0x43e>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <UART_SetConfig+0x3f4>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038cd 	.word	0x080038cd
 80038a8:	080038d5 	.word	0x080038d5
 80038ac:	080038eb 	.word	0x080038eb
 80038b0:	080038db 	.word	0x080038db
 80038b4:	080038eb 	.word	0x080038eb
 80038b8:	080038eb 	.word	0x080038eb
 80038bc:	080038eb 	.word	0x080038eb
 80038c0:	080038e3 	.word	0x080038e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c4:	f7fe fff4 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 80038c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038ca:	e014      	b.n	80038f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038cc:	f7ff f806 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80038d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038d2:	e010      	b.n	80038f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d4:	4b5a      	ldr	r3, [pc, #360]	; (8003a40 <UART_SetConfig+0x594>)
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038d8:	e00d      	b.n	80038f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038da:	f7fe ff7b 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80038de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038e0:	e009      	b.n	80038f6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038e8:	e005      	b.n	80038f6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 8089 	beq.w	8003a10 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	4a4e      	ldr	r2, [pc, #312]	; (8003a3c <UART_SetConfig+0x590>)
 8003904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003908:	461a      	mov	r2, r3
 800390a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003910:	005a      	lsls	r2, r3, #1
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	441a      	add	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003922:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2b0f      	cmp	r3, #15
 8003928:	d916      	bls.n	8003958 <UART_SetConfig+0x4ac>
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003930:	d212      	bcs.n	8003958 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f023 030f 	bic.w	r3, r3, #15
 800393a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	085b      	lsrs	r3, r3, #1
 8003940:	b29b      	uxth	r3, r3
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	b29a      	uxth	r2, r3
 8003948:	8bfb      	ldrh	r3, [r7, #30]
 800394a:	4313      	orrs	r3, r2
 800394c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	8bfa      	ldrh	r2, [r7, #30]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	e05b      	b.n	8003a10 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800395e:	e057      	b.n	8003a10 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003964:	2b08      	cmp	r3, #8
 8003966:	d828      	bhi.n	80039ba <UART_SetConfig+0x50e>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <UART_SetConfig+0x4c4>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	08003995 	.word	0x08003995
 8003974:	0800399d 	.word	0x0800399d
 8003978:	080039a5 	.word	0x080039a5
 800397c:	080039bb 	.word	0x080039bb
 8003980:	080039ab 	.word	0x080039ab
 8003984:	080039bb 	.word	0x080039bb
 8003988:	080039bb 	.word	0x080039bb
 800398c:	080039bb 	.word	0x080039bb
 8003990:	080039b3 	.word	0x080039b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7fe ff8c 	bl	80028b0 <HAL_RCC_GetPCLK1Freq>
 8003998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800399a:	e014      	b.n	80039c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800399c:	f7fe ff9e 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 80039a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039a2:	e010      	b.n	80039c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a4:	4b26      	ldr	r3, [pc, #152]	; (8003a40 <UART_SetConfig+0x594>)
 80039a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039a8:	e00d      	b.n	80039c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039aa:	f7fe ff13 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80039ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039b0:	e009      	b.n	80039c6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039b8:	e005      	b.n	80039c6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039c4:	bf00      	nop
    }

    if (pclk != 0U)
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d021      	beq.n	8003a10 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	4a1a      	ldr	r2, [pc, #104]	; (8003a3c <UART_SetConfig+0x590>)
 80039d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039d6:	461a      	mov	r2, r3
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	fbb3 f2f2 	udiv	r2, r3, r2
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	441a      	add	r2, r3
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2b0f      	cmp	r3, #15
 80039f4:	d909      	bls.n	8003a0a <UART_SetConfig+0x55e>
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fc:	d205      	bcs.n	8003a0a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60da      	str	r2, [r3, #12]
 8003a08:	e002      	b.n	8003a10 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2200      	movs	r2, #0
 8003a24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003a2c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3730      	adds	r7, #48	; 0x30
 8003a34:	46bd      	mov	sp, r7
 8003a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3a:	bf00      	nop
 8003a3c:	080041e0 	.word	0x080041e0
 8003a40:	00f42400 	.word	0x00f42400

08003a44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	f003 0310 	and.w	r3, r3, #16
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afa:	f003 0320 	and.w	r3, r3, #32
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01a      	beq.n	8003b5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b42:	d10a      	bne.n	8003b5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00a      	beq.n	8003b7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	605a      	str	r2, [r3, #4]
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b098      	sub	sp, #96	; 0x60
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b98:	f7fc fff8 	bl	8000b8c <HAL_GetTick>
 8003b9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0308 	and.w	r3, r3, #8
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d12f      	bne.n	8003c0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f88e 	bl	8003cdc <UART_WaitOnFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d022      	beq.n	8003c0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bda:	653b      	str	r3, [r7, #80]	; 0x50
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be4:	647b      	str	r3, [r7, #68]	; 0x44
 8003be6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e6      	bne.n	8003bc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e063      	b.n	8003cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0304 	and.w	r3, r3, #4
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d149      	bne.n	8003cae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c22:	2200      	movs	r2, #0
 8003c24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f857 	bl	8003cdc <UART_WaitOnFlagUntilTimeout>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d03c      	beq.n	8003cae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	623b      	str	r3, [r7, #32]
   return(result);
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c52:	633b      	str	r3, [r7, #48]	; 0x30
 8003c54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e6      	bne.n	8003c34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3308      	adds	r3, #8
 8003c84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c86:	61fa      	str	r2, [r7, #28]
 8003c88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8a:	69b9      	ldr	r1, [r7, #24]
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	e841 2300 	strex	r3, r2, [r1]
 8003c92:	617b      	str	r3, [r7, #20]
   return(result);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d1e5      	bne.n	8003c66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e012      	b.n	8003cd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2220      	movs	r2, #32
 8003cba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3758      	adds	r7, #88	; 0x58
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	603b      	str	r3, [r7, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cec:	e04f      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf4:	d04b      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf6:	f7fc ff49 	bl	8000b8c <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d302      	bcc.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e04e      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d037      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b80      	cmp	r3, #128	; 0x80
 8003d22:	d034      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b40      	cmp	r3, #64	; 0x40
 8003d28:	d031      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d110      	bne.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2208      	movs	r2, #8
 8003d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 f838 	bl	8003db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e029      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d68:	d111      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 f81e 	bl	8003db6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e00f      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69da      	ldr	r2, [r3, #28]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	bf0c      	ite	eq
 8003d9e:	2301      	moveq	r3, #1
 8003da0:	2300      	movne	r3, #0
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0a0      	beq.n	8003cee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b095      	sub	sp, #84	; 0x54
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e6      	bne.n	8003dbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3308      	adds	r3, #8
 8003df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e3      	bne.n	8003df0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d118      	bne.n	8003e62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	f023 0310 	bic.w	r3, r3, #16
 8003e44:	647b      	str	r3, [r7, #68]	; 0x44
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6979      	ldr	r1, [r7, #20]
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e6      	bne.n	8003e30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e76:	bf00      	nop
 8003e78:	3754      	adds	r7, #84	; 0x54
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff faed 	bl	8003480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b088      	sub	sp, #32
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6979      	ldr	r1, [r7, #20]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e6      	bne.n	8003eb6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff fab8 	bl	800346c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003efc:	bf00      	nop
 8003efe:	3720      	adds	r7, #32
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_UARTEx_DisableFifoMode+0x16>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e027      	b.n	8003fa6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2224      	movs	r2, #36	; 0x24
 8003f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f84:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003fb2:	b580      	push	{r7, lr}
 8003fb4:	b084      	sub	sp, #16
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6078      	str	r0, [r7, #4]
 8003fba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e02d      	b.n	8004026 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2224      	movs	r2, #36	; 0x24
 8003fd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f850 	bl	80040ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004042:	2302      	movs	r3, #2
 8004044:	e02d      	b.n	80040a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2224      	movs	r2, #36	; 0x24
 8004052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f812 	bl	80040ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d108      	bne.n	80040ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80040cc:	e031      	b.n	8004132 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80040ce:	2308      	movs	r3, #8
 80040d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80040d2:	2308      	movs	r3, #8
 80040d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	0e5b      	lsrs	r3, r3, #25
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	0f5b      	lsrs	r3, r3, #29
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80040f6:	7bbb      	ldrb	r3, [r7, #14]
 80040f8:	7b3a      	ldrb	r2, [r7, #12]
 80040fa:	4911      	ldr	r1, [pc, #68]	; (8004140 <UARTEx_SetNbDataToProcess+0x94>)
 80040fc:	5c8a      	ldrb	r2, [r1, r2]
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004102:	7b3a      	ldrb	r2, [r7, #12]
 8004104:	490f      	ldr	r1, [pc, #60]	; (8004144 <UARTEx_SetNbDataToProcess+0x98>)
 8004106:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004108:	fb93 f3f2 	sdiv	r3, r3, r2
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	7b7a      	ldrb	r2, [r7, #13]
 8004118:	4909      	ldr	r1, [pc, #36]	; (8004140 <UARTEx_SetNbDataToProcess+0x94>)
 800411a:	5c8a      	ldrb	r2, [r1, r2]
 800411c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004120:	7b7a      	ldrb	r2, [r7, #13]
 8004122:	4908      	ldr	r1, [pc, #32]	; (8004144 <UARTEx_SetNbDataToProcess+0x98>)
 8004124:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004126:	fb93 f3f2 	sdiv	r3, r3, r2
 800412a:	b29a      	uxth	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004132:	bf00      	nop
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	080041f8 	.word	0x080041f8
 8004144:	08004200 	.word	0x08004200

08004148 <memset>:
 8004148:	4402      	add	r2, r0
 800414a:	4603      	mov	r3, r0
 800414c:	4293      	cmp	r3, r2
 800414e:	d100      	bne.n	8004152 <memset+0xa>
 8004150:	4770      	bx	lr
 8004152:	f803 1b01 	strb.w	r1, [r3], #1
 8004156:	e7f9      	b.n	800414c <memset+0x4>

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4d0d      	ldr	r5, [pc, #52]	; (8004190 <__libc_init_array+0x38>)
 800415c:	4c0d      	ldr	r4, [pc, #52]	; (8004194 <__libc_init_array+0x3c>)
 800415e:	1b64      	subs	r4, r4, r5
 8004160:	10a4      	asrs	r4, r4, #2
 8004162:	2600      	movs	r6, #0
 8004164:	42a6      	cmp	r6, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	4d0b      	ldr	r5, [pc, #44]	; (8004198 <__libc_init_array+0x40>)
 800416a:	4c0c      	ldr	r4, [pc, #48]	; (800419c <__libc_init_array+0x44>)
 800416c:	f000 f818 	bl	80041a0 <_init>
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	2600      	movs	r6, #0
 8004176:	42a6      	cmp	r6, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004180:	4798      	blx	r3
 8004182:	3601      	adds	r6, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f855 3b04 	ldr.w	r3, [r5], #4
 800418a:	4798      	blx	r3
 800418c:	3601      	adds	r6, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	08004210 	.word	0x08004210
 8004194:	08004210 	.word	0x08004210
 8004198:	08004210 	.word	0x08004210
 800419c:	08004214 	.word	0x08004214

080041a0 <_init>:
 80041a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a2:	bf00      	nop
 80041a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a6:	bc08      	pop	{r3}
 80041a8:	469e      	mov	lr, r3
 80041aa:	4770      	bx	lr

080041ac <_fini>:
 80041ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ae:	bf00      	nop
 80041b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b2:	bc08      	pop	{r3}
 80041b4:	469e      	mov	lr, r3
 80041b6:	4770      	bx	lr
